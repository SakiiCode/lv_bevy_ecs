/* automatically generated by lvgl-codegen */
use crate::widgets::*;
use lvgl_sys::*;

pub fn lv_obj_lv_obj_set_pos(widget: &mut Widget, x: lv_coord_t, y: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_pos(widget.raw().as_mut(), x, y);
    }
}
pub fn lv_obj_set_x(widget: &mut Widget, x: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_x(widget.raw().as_mut(), x);
    }
}
pub fn lv_obj_set_y(widget: &mut Widget, y: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_y(widget.raw().as_mut(), y);
    }
}
pub fn lv_obj_set_size(widget: &mut Widget, w: lv_coord_t, h: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_size(widget.raw().as_mut(), w, h);
    }
}
pub fn lv_obj_refr_size(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_refr_size(widget.raw().as_mut()) }
}
pub fn lv_obj_set_width(widget: &mut Widget, w: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_width(widget.raw().as_mut(), w);
    }
}
pub fn lv_obj_set_height(widget: &mut Widget, h: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_height(widget.raw().as_mut(), h);
    }
}
pub fn lv_obj_set_content_width(widget: &mut Widget, w: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_content_width(widget.raw().as_mut(), w);
    }
}
pub fn lv_obj_set_content_height(widget: &mut Widget, h: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_content_height(widget.raw().as_mut(), h);
    }
}
pub fn lv_obj_set_layout(widget: &mut Widget, layout: u32) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_layout(widget.raw().as_mut(), layout);
    }
}
pub fn lv_obj_is_layout_positioned(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_is_layout_positioned(widget.raw().as_mut()) }
}
pub fn lv_obj_mark_layout_as_dirty(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_mark_layout_as_dirty(widget.raw().as_mut());
    }
}
pub fn lv_obj_update_layout(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_update_layout(widget.raw().as_mut());
    }
}
pub fn lv_obj_set_align(widget: &mut Widget, align: lv_align_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_align(widget.raw().as_mut(), align);
    }
}
pub fn lv_obj_align(widget: &mut Widget, align: lv_align_t, x_ofs: lv_coord_t, y_ofs: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_align(widget.raw().as_mut(), align, x_ofs, y_ofs);
    }
}
pub fn lv_obj_align_to(
    widget: &mut Widget,
    base: &Widget,
    align: lv_align_t,
    x_ofs: lv_coord_t,
    y_ofs: lv_coord_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_align_to(
            widget.raw().as_mut(),
            base.raw().as_ref(),
            align,
            x_ofs,
            y_ofs,
        );
    }
}
pub fn lv_obj_get_coords(widget: &mut Widget, coords: &mut lv_area_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_get_coords(widget.raw().as_mut(), coords);
    }
}
pub fn lv_obj_get_x(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_x(widget.raw().as_mut()) }
}
pub fn lv_obj_get_x2(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_x2(widget.raw().as_mut()) }
}
pub fn lv_obj_get_y(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_y(widget.raw().as_mut()) }
}
pub fn lv_obj_get_y2(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_y2(widget.raw().as_mut()) }
}
pub fn lv_obj_get_x_aligned(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_x_aligned(widget.raw().as_mut()) }
}
pub fn lv_obj_get_y_aligned(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_y_aligned(widget.raw().as_mut()) }
}
pub fn lv_obj_get_width(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_width(widget.raw().as_mut()) }
}
pub fn lv_obj_get_height(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_height(widget.raw().as_mut()) }
}
pub fn lv_obj_get_content_width(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_content_width(widget.raw().as_mut()) }
}
pub fn lv_obj_get_content_height(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_content_height(widget.raw().as_mut()) }
}
pub fn lv_obj_get_content_coords(widget: &mut Widget, area: &mut lv_area_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_get_content_coords(widget.raw().as_mut(), area);
    }
}
pub fn lv_obj_get_self_width(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_self_width(widget.raw().as_mut()) }
}
pub fn lv_obj_get_self_height(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_self_height(widget.raw().as_mut()) }
}
pub fn lv_obj_refresh_self_size(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_refresh_self_size(widget.raw().as_mut()) }
}
pub fn lv_obj_refr_pos(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_refr_pos(widget.raw().as_mut());
    }
}
pub fn lv_obj_move_to(widget: &mut Widget, x: lv_coord_t, y: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_move_to(widget.raw().as_mut(), x, y);
    }
}
pub fn lv_obj_move_children_by(
    widget: &mut Widget,
    x_diff: lv_coord_t,
    y_diff: lv_coord_t,
    ignore_floating: bool,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_move_children_by(widget.raw().as_mut(), x_diff, y_diff, ignore_floating);
    }
}
pub fn lv_obj_transform_point(widget: &mut Widget, p: &mut lv_point_t, recursive: bool, inv: bool) -> () {
    unsafe {
        lvgl_sys::lv_obj_transform_point(widget.raw().as_mut(), p, recursive, inv);
    }
}
pub fn lv_obj_get_transformed_area(
    widget: &mut Widget,
    area: &mut lv_area_t,
    recursive: bool,
    inv: bool,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_get_transformed_area(widget.raw().as_mut(), area, recursive, inv);
    }
}
pub fn lv_obj_invalidate_area(widget: &mut Widget, area: &lv_area_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_invalidate_area(widget.raw().as_mut(), area);
    }
}
pub fn lv_obj_invalidate(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_invalidate(widget.raw().as_mut());
    }
}
pub fn lv_obj_area_is_visible(widget: &mut Widget, area: &mut lv_area_t) -> bool {
    unsafe { lvgl_sys::lv_obj_area_is_visible(widget.raw().as_mut(), area) }
}
pub fn lv_obj_is_visible(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_is_visible(widget.raw().as_mut()) }
}
pub fn lv_obj_set_ext_click_area(widget: &mut Widget, size: lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_ext_click_area(widget.raw().as_mut(), size);
    }
}
pub fn lv_obj_get_click_area(widget: &mut Widget, area: &mut lv_area_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_get_click_area(widget.raw().as_mut(), area);
    }
}
pub fn lv_obj_hit_test(widget: &mut Widget, point: &lv_point_t) -> bool {
    unsafe { lvgl_sys::lv_obj_hit_test(widget.raw().as_mut(), point) }
}
pub fn lv_obj_del(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_del(widget.raw().as_mut());
    }
}
pub fn lv_obj_clean(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_clean(widget.raw().as_mut());
    }
}
pub fn lv_obj_del_delayed(widget: &mut Widget, delay_ms: u32) -> () {
    unsafe {
        lvgl_sys::lv_obj_del_delayed(widget.raw().as_mut(), delay_ms);
    }
}
pub fn lv_obj_del_async(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_del_async(widget.raw().as_mut());
    }
}
pub fn lv_obj_set_parent(widget: &mut Widget, parent: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_parent(widget.raw().as_mut(), parent.raw().as_mut());
    }
}
pub fn lv_obj_swap(widget: &mut Widget, obj2: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_swap(widget.raw().as_mut(), obj2.raw().as_mut());
    }
}
pub fn lv_obj_move_to_index(widget: &mut Widget, index: i32) -> () {
    unsafe {
        lvgl_sys::lv_obj_move_to_index(widget.raw().as_mut(), index);
    }
}
pub fn lv_obj_get_child_cnt(widget: &mut Widget) -> u32 {
    unsafe { lvgl_sys::lv_obj_get_child_cnt(widget.raw().as_mut()) }
}
pub fn lv_obj_get_index(widget: &mut Widget) -> u32 {
    unsafe { lvgl_sys::lv_obj_get_index(widget.raw().as_mut()) }
}
pub fn lv_obj_set_scrollbar_mode(widget: &mut Widget, mode: lv_scrollbar_mode_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_scrollbar_mode(widget.raw().as_mut(), mode);
    }
}
pub fn lv_obj_set_scroll_dir(widget: &mut Widget, dir: lv_dir_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_scroll_dir(widget.raw().as_mut(), dir);
    }
}
pub fn lv_obj_set_scroll_snap_x(widget: &mut Widget, align: lv_scroll_snap_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_scroll_snap_x(widget.raw().as_mut(), align);
    }
}
pub fn lv_obj_set_scroll_snap_y(widget: &mut Widget, align: lv_scroll_snap_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_scroll_snap_y(widget.raw().as_mut(), align);
    }
}
pub fn lv_obj_get_scrollbar_mode(widget: &mut Widget) -> lv_scrollbar_mode_t {
    unsafe { lvgl_sys::lv_obj_get_scrollbar_mode(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_dir(widget: &mut Widget) -> lv_dir_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_dir(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_snap_x(widget: &mut Widget) -> lv_scroll_snap_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_snap_x(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_snap_y(widget: &mut Widget) -> lv_scroll_snap_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_snap_y(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_x(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_x(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_y(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_y(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_top(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_top(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_bottom(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_bottom(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_left(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_left(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_right(widget: &mut Widget) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_get_scroll_right(widget.raw().as_mut()) }
}
pub fn lv_obj_get_scroll_end(widget: &mut Widget, end: &mut lv_point_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_get_scroll_end(widget.raw().as_mut(), end);
    }
}
pub fn lv_obj_scroll_by(widget: &mut Widget, x: lv_coord_t, y: lv_coord_t, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_by(widget.raw().as_mut(), x, y, anim_en);
    }
}
pub fn lv_obj_scroll_by_bounded(
    widget: &mut Widget,
    dx: lv_coord_t,
    dy: lv_coord_t,
    anim_en: lv_anim_enable_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_by_bounded(widget.raw().as_mut(), dx, dy, anim_en);
    }
}
pub fn lv_obj_scroll_to(widget: &mut Widget, x: lv_coord_t, y: lv_coord_t, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_to(widget.raw().as_mut(), x, y, anim_en);
    }
}
pub fn lv_obj_scroll_to_x(widget: &mut Widget, x: lv_coord_t, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_to_x(widget.raw().as_mut(), x, anim_en);
    }
}
pub fn lv_obj_scroll_to_y(widget: &mut Widget, y: lv_coord_t, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_to_y(widget.raw().as_mut(), y, anim_en);
    }
}
pub fn lv_obj_scroll_to_view(widget: &mut Widget, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_to_view(widget.raw().as_mut(), anim_en);
    }
}
pub fn lv_obj_scroll_to_view_recursive(widget: &mut Widget, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_scroll_to_view_recursive(widget.raw().as_mut(), anim_en);
    }
}
pub fn lv_obj_is_scrolling(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_is_scrolling(widget.raw().as_mut()) }
}
pub fn lv_obj_update_snap(widget: &mut Widget, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_update_snap(widget.raw().as_mut(), anim_en);
    }
}
pub fn lv_obj_get_scrollbar_area(widget: &mut Widget, hor: &mut lv_area_t, ver: &mut lv_area_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_get_scrollbar_area(widget.raw().as_mut(), hor, ver);
    }
}
pub fn lv_obj_scrollbar_invalidate(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_scrollbar_invalidate(widget.raw().as_mut());
    }
}
pub fn lv_obj_readjust_scroll(widget: &mut Widget, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_readjust_scroll(widget.raw().as_mut(), anim_en);
    }
}
pub fn lv_obj_add_style(widget: &mut Widget, style: &mut lv_style_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_add_style(widget.raw().as_mut(), style, selector);
    }
}
pub fn lv_obj_remove_style(widget: &mut Widget, style: &mut lv_style_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_remove_style(widget.raw().as_mut(), style, selector);
    }
}
pub fn lv_obj_refresh_style(widget: &mut Widget, part: lv_part_t, prop: lv_style_prop_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_refresh_style(widget.raw().as_mut(), part, prop);
    }
}
pub fn lv_obj_get_style_prop(
    widget: &mut Widget,
    part: lv_part_t,
    prop: lv_style_prop_t,
) -> lv_style_value_t {
    unsafe { lvgl_sys::lv_obj_get_style_prop(widget.raw().as_mut(), part, prop) }
}
pub fn lv_obj_set_local_style_prop(
    widget: &mut Widget,
    prop: lv_style_prop_t,
    value: lv_style_value_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_local_style_prop(widget.raw().as_mut(), prop, value, selector);
    }
}
pub fn lv_obj_set_local_style_prop_meta(
    widget: &mut Widget,
    prop: lv_style_prop_t,
    meta: u16,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_local_style_prop_meta(widget.raw().as_mut(), prop, meta, selector);
    }
}
pub fn lv_obj_get_local_style_prop(
    widget: &mut Widget,
    prop: lv_style_prop_t,
    value: &mut lv_style_value_t,
    selector: lv_style_selector_t,
) -> lv_style_res_t {
    unsafe { lvgl_sys::lv_obj_get_local_style_prop(widget.raw().as_mut(), prop, value, selector) }
}
pub fn lv_obj_remove_local_style_prop(
    widget: &mut Widget,
    prop: lv_style_prop_t,
    selector: lv_style_selector_t,
) -> bool {
    unsafe { lvgl_sys::lv_obj_remove_local_style_prop(widget.raw().as_mut(), prop, selector) }
}
pub fn lv_obj_fade_in(widget: &mut Widget, time: u32, delay: u32) -> () {
    unsafe {
        lvgl_sys::lv_obj_fade_in(widget.raw().as_mut(), time, delay);
    }
}
pub fn lv_obj_fade_out(widget: &mut Widget, time: u32, delay: u32) -> () {
    unsafe {
        lvgl_sys::lv_obj_fade_out(widget.raw().as_mut(), time, delay);
    }
}
pub fn lv_obj_set_style_width(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_min_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_min_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_max_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_max_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_height(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_height(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_min_height(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_min_height(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_max_height(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_max_height(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_x(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_x(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_y(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_y(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_align(widget: &mut Widget, value: lv_align_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_align(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transform_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transform_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transform_height(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transform_height(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_translate_x(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_translate_x(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_translate_y(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_translate_y(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transform_zoom(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transform_zoom(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transform_angle(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transform_angle(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transform_pivot_x(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transform_pivot_x(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transform_pivot_y(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transform_pivot_y(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_pad_top(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_pad_top(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_pad_bottom(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_pad_bottom(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_pad_left(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_pad_left(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_pad_right(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_pad_right(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_pad_row(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_pad_row(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_pad_column(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_pad_column(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_opa(widget: &mut Widget, value: lv_opa_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_grad_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_grad_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_grad_dir(
    widget: &mut Widget,
    value: lv_grad_dir_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_grad_dir(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_main_stop(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_main_stop(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_grad_stop(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_grad_stop(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_grad(
    widget: &mut Widget,
    value: &lv_grad_dsc_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_grad(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_dither_mode(
    widget: &mut Widget,
    value: lv_dither_mode_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_dither_mode(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_img_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_img_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_img_recolor(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_img_recolor(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_img_recolor_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_img_recolor_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_bg_img_tiled(widget: &mut Widget, value: bool, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_bg_img_tiled(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_border_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_border_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_border_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_border_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_border_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_border_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_border_side(
    widget: &mut Widget,
    value: lv_border_side_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_border_side(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_border_post(widget: &mut Widget, value: bool, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_border_post(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_outline_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_outline_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_outline_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_outline_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_outline_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_outline_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_outline_pad(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_outline_pad(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_shadow_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_shadow_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_shadow_ofs_x(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_shadow_ofs_x(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_shadow_ofs_y(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_shadow_ofs_y(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_shadow_spread(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_shadow_spread(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_shadow_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_shadow_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_shadow_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_shadow_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_img_opa(widget: &mut Widget, value: lv_opa_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_img_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_img_recolor(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_img_recolor(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_img_recolor_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_img_recolor_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_line_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_line_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_line_dash_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_line_dash_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_line_dash_gap(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_line_dash_gap(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_line_rounded(widget: &mut Widget, value: bool, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_line_rounded(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_line_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_line_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_line_opa(widget: &mut Widget, value: lv_opa_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_line_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_arc_width(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_arc_width(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_arc_rounded(widget: &mut Widget, value: bool, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_arc_rounded(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_arc_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_arc_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_arc_opa(widget: &mut Widget, value: lv_opa_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_arc_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_color(
    widget: &mut Widget,
    value: lv_color_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_color(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_opa(widget: &mut Widget, value: lv_opa_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_font(
    widget: &mut Widget,
    value: &lv_font_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_font(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_letter_space(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_letter_space(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_line_space(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_line_space(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_decor(
    widget: &mut Widget,
    value: lv_text_decor_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_decor(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_text_align(
    widget: &mut Widget,
    value: lv_text_align_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_text_align(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_radius(widget: &mut Widget, value: lv_coord_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_radius(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_clip_corner(widget: &mut Widget, value: bool, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_clip_corner(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_opa(widget: &mut Widget, value: lv_opa_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_color_filter_dsc(
    widget: &mut Widget,
    value: &lv_color_filter_dsc_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_color_filter_dsc(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_color_filter_opa(
    widget: &mut Widget,
    value: lv_opa_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_color_filter_opa(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_anim(widget: &mut Widget, value: &lv_anim_t, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_anim(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_anim_time(widget: &mut Widget, value: u32, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_anim_time(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_anim_speed(widget: &mut Widget, value: u32, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_anim_speed(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_transition(
    widget: &mut Widget,
    value: &lv_style_transition_dsc_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_transition(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_blend_mode(
    widget: &mut Widget,
    value: lv_blend_mode_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_blend_mode(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_layout(widget: &mut Widget, value: u16, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_layout(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_base_dir(
    widget: &mut Widget,
    value: lv_base_dir_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_base_dir(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_calculate_style_text_align(
    widget: &mut Widget,
    part: lv_part_t,
    txt: &cstr_core::CStr,
) -> lv_text_align_t {
    unsafe { lvgl_sys::lv_obj_calculate_style_text_align(widget.raw().as_mut(), part, txt.as_ptr()) }
}
pub fn lv_obj_init_draw_rect_dsc(widget: &mut Widget, part: u32, draw_dsc: &mut lv_draw_rect_dsc_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_init_draw_rect_dsc(widget.raw().as_mut(), part, draw_dsc);
    }
}
pub fn lv_obj_init_draw_label_dsc(widget: &mut Widget, part: u32, draw_dsc: &mut lv_draw_label_dsc_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_init_draw_label_dsc(widget.raw().as_mut(), part, draw_dsc);
    }
}
pub fn lv_obj_init_draw_img_dsc(widget: &mut Widget, part: u32, draw_dsc: &mut lv_draw_img_dsc_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_init_draw_img_dsc(widget.raw().as_mut(), part, draw_dsc);
    }
}
pub fn lv_obj_init_draw_line_dsc(widget: &mut Widget, part: u32, draw_dsc: &mut lv_draw_line_dsc_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_init_draw_line_dsc(widget.raw().as_mut(), part, draw_dsc);
    }
}
pub fn lv_obj_init_draw_arc_dsc(widget: &mut Widget, part: u32, draw_dsc: &mut lv_draw_arc_dsc_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_init_draw_arc_dsc(widget.raw().as_mut(), part, draw_dsc);
    }
}
pub fn lv_obj_calculate_ext_draw_size(widget: &mut Widget, part: u32) -> lv_coord_t {
    unsafe { lvgl_sys::lv_obj_calculate_ext_draw_size(widget.raw().as_mut(), part) }
}
pub fn lv_obj_refresh_ext_draw_size(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_refresh_ext_draw_size(widget.raw().as_mut());
    }
}
pub fn lv_obj_class_init_obj(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_class_init_obj(widget.raw().as_mut());
    }
}
pub fn lv_obj_is_editable(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_is_editable(widget.raw().as_mut()) }
}
pub fn lv_obj_is_group_def(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_is_group_def(widget.raw().as_mut()) }
}
pub fn lv_obj_remove_event_cb(widget: &mut Widget, event_cb: lv_event_cb_t) -> bool {
    unsafe { lvgl_sys::lv_obj_remove_event_cb(widget.raw().as_mut(), event_cb) }
}
pub fn lv_obj_remove_event_dsc(widget: &mut Widget, event_dsc: &mut _lv_event_dsc_t) -> bool {
    unsafe { lvgl_sys::lv_obj_remove_event_dsc(widget.raw().as_mut(), event_dsc) }
}
pub fn lv_obj_add_flag(widget: &mut Widget, f: lv_obj_flag_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_add_flag(widget.raw().as_mut(), f);
    }
}
pub fn lv_obj_clear_flag(widget: &mut Widget, f: lv_obj_flag_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_clear_flag(widget.raw().as_mut(), f);
    }
}
pub fn lv_obj_add_state(widget: &mut Widget, state: lv_state_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_add_state(widget.raw().as_mut(), state);
    }
}
pub fn lv_obj_clear_state(widget: &mut Widget, state: lv_state_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_clear_state(widget.raw().as_mut(), state);
    }
}
pub fn lv_obj_has_flag(widget: &mut Widget, f: lv_obj_flag_t) -> bool {
    unsafe { lvgl_sys::lv_obj_has_flag(widget.raw().as_mut(), f) }
}
pub fn lv_obj_has_flag_any(widget: &mut Widget, f: lv_obj_flag_t) -> bool {
    unsafe { lvgl_sys::lv_obj_has_flag_any(widget.raw().as_mut(), f) }
}
pub fn lv_obj_get_state(widget: &mut Widget) -> lv_state_t {
    unsafe { lvgl_sys::lv_obj_get_state(widget.raw().as_mut()) }
}
pub fn lv_obj_has_state(widget: &mut Widget, state: lv_state_t) -> bool {
    unsafe { lvgl_sys::lv_obj_has_state(widget.raw().as_mut(), state) }
}
pub fn lv_obj_allocate_spec_attr(widget: &mut Widget) -> () {
    unsafe {
        lvgl_sys::lv_obj_allocate_spec_attr(widget.raw().as_mut());
    }
}
pub fn lv_obj_check_type(widget: &mut Widget, class_p: &lv_obj_class_t) -> bool {
    unsafe { lvgl_sys::lv_obj_check_type(widget.raw().as_mut(), class_p) }
}
pub fn lv_obj_has_class(widget: &mut Widget, class_p: &lv_obj_class_t) -> bool {
    unsafe { lvgl_sys::lv_obj_has_class(widget.raw().as_mut(), class_p) }
}
pub fn lv_obj_is_valid(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_obj_is_valid(widget.raw().as_mut()) }
}
pub fn lv_obj_set_flex_flow(widget: &mut Widget, flow: lv_flex_flow_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_flex_flow(widget.raw().as_mut(), flow);
    }
}
pub fn lv_obj_set_flex_align(
    widget: &mut Widget,
    main_place: lv_flex_align_t,
    cross_place: lv_flex_align_t,
    track_cross_place: lv_flex_align_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_flex_align(
            widget.raw().as_mut(),
            main_place,
            cross_place,
            track_cross_place,
        );
    }
}
pub fn lv_obj_set_flex_grow(widget: &mut Widget, grow: u8) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_flex_grow(widget.raw().as_mut(), grow);
    }
}
pub fn lv_obj_set_style_flex_flow(
    widget: &mut Widget,
    value: lv_flex_flow_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_flex_flow(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_flex_main_place(
    widget: &mut Widget,
    value: lv_flex_align_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_flex_main_place(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_flex_cross_place(
    widget: &mut Widget,
    value: lv_flex_align_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_flex_cross_place(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_flex_track_place(
    widget: &mut Widget,
    value: lv_flex_align_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_flex_track_place(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_flex_grow(widget: &mut Widget, value: u8, selector: lv_style_selector_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_flex_grow(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_grid_dsc_array(widget: &mut Widget, col_dsc: &lv_coord_t, row_dsc: &lv_coord_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_grid_dsc_array(widget.raw().as_mut(), col_dsc, row_dsc);
    }
}
pub fn lv_obj_set_grid_align(
    widget: &mut Widget,
    column_align: lv_grid_align_t,
    row_align: lv_grid_align_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_grid_align(widget.raw().as_mut(), column_align, row_align);
    }
}
pub fn lv_obj_set_grid_cell(
    widget: &mut Widget,
    column_align: lv_grid_align_t,
    col_pos: u8,
    col_span: u8,
    row_align: lv_grid_align_t,
    row_pos: u8,
    row_span: u8,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_grid_cell(
            widget.raw().as_mut(),
            column_align,
            col_pos,
            col_span,
            row_align,
            row_pos,
            row_span,
        );
    }
}
pub fn lv_obj_set_style_grid_row_dsc_array(
    widget: &mut Widget,
    value: &lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_row_dsc_array(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_column_dsc_array(
    widget: &mut Widget,
    value: &lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_column_dsc_array(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_row_align(
    widget: &mut Widget,
    value: lv_grid_align_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_row_align(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_column_align(
    widget: &mut Widget,
    value: lv_grid_align_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_column_align(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_cell_column_pos(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_cell_column_pos(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_cell_column_span(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_cell_column_span(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_cell_row_pos(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_cell_row_pos(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_cell_row_span(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_cell_row_span(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_cell_x_align(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_cell_x_align(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_style_grid_cell_y_align(
    widget: &mut Widget,
    value: lv_coord_t,
    selector: lv_style_selector_t,
) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_style_grid_cell_y_align(widget.raw().as_mut(), value, selector);
    }
}
pub fn lv_obj_set_tile(widget: &mut Widget, tile_obj: &mut Widget, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_tile(widget.raw().as_mut(), tile_obj.raw().as_mut(), anim_en);
    }
}
pub fn lv_obj_set_tile_id(widget: &mut Widget, col_id: u32, row_id: u32, anim_en: lv_anim_enable_t) -> () {
    unsafe {
        lvgl_sys::lv_obj_set_tile_id(widget.raw().as_mut(), col_id, row_id, anim_en);
    }
}

pub fn lv_label_set_text(widget: &mut Widget, text: &cstr_core::CStr) -> () {
    unsafe {
        lvgl_sys::lv_label_set_text(widget.raw().as_mut(), text.as_ptr());
    }
}
pub fn lv_label_set_text_fmt(widget: &mut Widget, fmt: &cstr_core::CStr) -> () {
    unsafe {
        lvgl_sys::lv_label_set_text_fmt(widget.raw().as_mut(), fmt.as_ptr());
    }
}
pub fn lv_label_set_text_static(widget: &mut Widget, text: &cstr_core::CStr) -> () {
    unsafe {
        lvgl_sys::lv_label_set_text_static(widget.raw().as_mut(), text.as_ptr());
    }
}
pub fn lv_label_set_long_mode(widget: &mut Widget, long_mode: lv_label_long_mode_t) -> () {
    unsafe {
        lvgl_sys::lv_label_set_long_mode(widget.raw().as_mut(), long_mode);
    }
}
pub fn lv_label_set_recolor(widget: &mut Widget, en: bool) -> () {
    unsafe {
        lvgl_sys::lv_label_set_recolor(widget.raw().as_mut(), en);
    }
}
pub fn lv_label_set_text_sel_start(widget: &mut Widget, index: u32) -> () {
    unsafe {
        lvgl_sys::lv_label_set_text_sel_start(widget.raw().as_mut(), index);
    }
}
pub fn lv_label_set_text_sel_end(widget: &mut Widget, index: u32) -> () {
    unsafe {
        lvgl_sys::lv_label_set_text_sel_end(widget.raw().as_mut(), index);
    }
}
pub fn lv_label_get_long_mode(widget: &mut Widget) -> lv_label_long_mode_t {
    unsafe { lvgl_sys::lv_label_get_long_mode(widget.raw().as_mut()) }
}
pub fn lv_label_get_recolor(widget: &mut Widget) -> bool {
    unsafe { lvgl_sys::lv_label_get_recolor(widget.raw().as_mut()) }
}
pub fn lv_label_get_letter_pos(widget: &mut Widget, char_id: u32, pos: &mut lv_point_t) -> () {
    unsafe {
        lvgl_sys::lv_label_get_letter_pos(widget.raw().as_mut(), char_id, pos);
    }
}
pub fn lv_label_get_letter_on(widget: &mut Widget, pos_in: &mut lv_point_t) -> u32 {
    unsafe { lvgl_sys::lv_label_get_letter_on(widget.raw().as_mut(), pos_in) }
}
pub fn lv_label_is_char_under_pos(widget: &mut Widget, pos: &mut lv_point_t) -> bool {
    unsafe { lvgl_sys::lv_label_is_char_under_pos(widget.raw().as_mut(), pos) }
}
pub fn lv_label_get_text_selection_start(widget: &mut Widget) -> u32 {
    unsafe { lvgl_sys::lv_label_get_text_selection_start(widget.raw().as_mut()) }
}
pub fn lv_label_get_text_selection_end(widget: &mut Widget) -> u32 {
    unsafe { lvgl_sys::lv_label_get_text_selection_end(widget.raw().as_mut()) }
}
pub fn lv_label_ins_text(widget: &mut Widget, pos: u32, txt: &cstr_core::CStr) -> () {
    unsafe {
        lvgl_sys::lv_label_ins_text(widget.raw().as_mut(), pos, txt.as_ptr());
    }
}
pub fn lv_label_cut_text(widget: &mut Widget, pos: u32, cnt: u32) -> () {
    unsafe {
        lvgl_sys::lv_label_cut_text(widget.raw().as_mut(), pos, cnt);
    }
}
